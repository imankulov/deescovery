{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Deescovery Micro-framework initialization problem Micro-framework-based projects are clean while they're small. Every micro-framework codebase I've seen, has a mess in the project initialization. With time, create_app() becomes filled with ad-hoc settings, imports-within-functions, and plug-in initializations. The Application Factory Pattern, proposed, for example, in the official Flask documentation , and the Flask Mega-Tutorial , legitimize this approach. The nature of create_app() leaves no place for the open-closed principle . We update this module every time we add a new plug-in, a new blueprint, or a new package. # myproject/__ini__.py # # A common Flask application. The code is based on the Flask Mega-Tutorial. def create_app ( config_class = Config ): app = Flask ( __name__ ) app . config . from_object ( config_class ) db . init_app ( app ) migrate . init_app ( app , db ) login . init_app ( app ) mail . init_app ( app ) bootstrap . init_app ( app ) moment . init_app ( app ) babel . init_app ( app ) from myproject.errors import bp as errors_bp app . register_blueprint ( errors_bp ) from myproject.auth import bp as auth_bp app . register_blueprint ( auth_bp , url_prefix = '/auth' ) return app A common Flask application. The code is based on the Flask Mega-Tutorial. With deescovery , you can make the same code shorter, and remove the dependencies from implementation details. # file: myproject/app.py from flask import Flask from deescovery import discover from deescovery.flask import get_flask_rules def create_app (): flask_app = Flask ( __name__ ) flask_app . config . from_object ( \"myproject.config\" ) discover ( \"myproject\" , get_flask_rules ( \"myproject\" , flask_app )) return flask_app Initially designed to solve a specific problem of initializing Flask applications, it was made generic enough to work with any micro-framework or no framework at all.","title":"Home"},{"location":"#deescovery","text":"","title":"Deescovery"},{"location":"#micro-framework-initialization-problem","text":"Micro-framework-based projects are clean while they're small. Every micro-framework codebase I've seen, has a mess in the project initialization. With time, create_app() becomes filled with ad-hoc settings, imports-within-functions, and plug-in initializations. The Application Factory Pattern, proposed, for example, in the official Flask documentation , and the Flask Mega-Tutorial , legitimize this approach. The nature of create_app() leaves no place for the open-closed principle . We update this module every time we add a new plug-in, a new blueprint, or a new package. # myproject/__ini__.py # # A common Flask application. The code is based on the Flask Mega-Tutorial. def create_app ( config_class = Config ): app = Flask ( __name__ ) app . config . from_object ( config_class ) db . init_app ( app ) migrate . init_app ( app , db ) login . init_app ( app ) mail . init_app ( app ) bootstrap . init_app ( app ) moment . init_app ( app ) babel . init_app ( app ) from myproject.errors import bp as errors_bp app . register_blueprint ( errors_bp ) from myproject.auth import bp as auth_bp app . register_blueprint ( auth_bp , url_prefix = '/auth' ) return app A common Flask application. The code is based on the Flask Mega-Tutorial. With deescovery , you can make the same code shorter, and remove the dependencies from implementation details. # file: myproject/app.py from flask import Flask from deescovery import discover from deescovery.flask import get_flask_rules def create_app (): flask_app = Flask ( __name__ ) flask_app . config . from_object ( \"myproject.config\" ) discover ( \"myproject\" , get_flask_rules ( \"myproject\" , flask_app )) return flask_app Initially designed to solve a specific problem of initializing Flask applications, it was made generic enough to work with any micro-framework or no framework at all.","title":"Micro-framework initialization problem"},{"location":"anything_else/","text":"Usage with anything else When it comes to taming the chaos, opinionated structure and automated discovery can help. The package implements a so-called visitor pattern . You describe your application structure, outlining where you keep models, blueprints, controllers, etc. You define auto-discovery rules: what your initialization code does when it finds an object of a specific type. You let deescovery do the rest. It's specifically helpful for frameworks that define resources on the fly with decorators and expect you to import all necessary modules. For example, it can be helpful for Flask to load all your blueprints, initialize extensions, and import SQLAlchemy models. You can create your own discovery rules with the discover() function, ModuleRule and ObjectRule . Optionally, you can take advantage of custom matchers, defined in deescovery.matchers . For example, that's how you print all modules and all callable objects within the deescovery itself. from deescovery import discover , ModuleRule , ObjectRule module_printer = ModuleRule ( name = \"module printer\" , module_matches = lambda module_name : True , module_action = lambda module_name : print ( f \"Found module { module_name } \" ), ) object_printer = ObjectRule ( name = \"object printer\" , module_matches = lambda module_name : True , object_matches = callable , object_action = lambda obj : print ( f \"Found callable object { obj !r} \" ), ) discover ( \"deescovery\" , rules = [ module_printer , object_printer ])","title":"Usage with anything else"},{"location":"anything_else/#usage-with-anything-else","text":"When it comes to taming the chaos, opinionated structure and automated discovery can help. The package implements a so-called visitor pattern . You describe your application structure, outlining where you keep models, blueprints, controllers, etc. You define auto-discovery rules: what your initialization code does when it finds an object of a specific type. You let deescovery do the rest. It's specifically helpful for frameworks that define resources on the fly with decorators and expect you to import all necessary modules. For example, it can be helpful for Flask to load all your blueprints, initialize extensions, and import SQLAlchemy models. You can create your own discovery rules with the discover() function, ModuleRule and ObjectRule . Optionally, you can take advantage of custom matchers, defined in deescovery.matchers . For example, that's how you print all modules and all callable objects within the deescovery itself. from deescovery import discover , ModuleRule , ObjectRule module_printer = ModuleRule ( name = \"module printer\" , module_matches = lambda module_name : True , module_action = lambda module_name : print ( f \"Found module { module_name } \" ), ) object_printer = ObjectRule ( name = \"object printer\" , module_matches = lambda module_name : True , object_matches = callable , object_action = lambda obj : print ( f \"Found callable object { obj !r} \" ), ) discover ( \"deescovery\" , rules = [ module_printer , object_printer ])","title":"Usage with anything else"},{"location":"api/","text":"discovery IRule Generic type for a rule. ModuleRule dataclass Module rule. Defines a rule 'Run for all modules matching '. ObjectRule dataclass Object rule. Defines a rule 'Run for all objects matching inside modules matching '. discover ( import_path , rules ) Discover all objects. Scan the package, find all modules and objects, matching the given set of rules, and apply actions defined in them. Parameters: Name Type Description Default import_path str top-level module name to start scanning. Usually, it's a name of your application, e.g., \"myapp\". If your application doesn't have a single top-level module, you will probably call it for all top-level modules. required rules List[deescovery.discovery.IRule] a list of module and objects rules. Each rule contains the match specification and the action, if the object matches. required flask Module for the Flask-specific rules. A sample Flask app generator would look like this. from flask import Flask from deescovery discover from deescovery.flask import get_flask_rules def app () -> Flask : flask_app = Flask ( __name__ ) flask_app . config . from_object ( \"myapp.config\" ) discovery_rules = get_flask_rules ( \"myapp\" , flask_app ) discover ( \"dashboards\" , discovery_rules ) return flask_app blueprints_loader ( import_path , flask_app ) Find and import all blueprints in the application. commands_loader ( import_path , flask_app ) Find all commands and register them as Flask CLI commands. generate_patterns ( import_path , module_prefix ) Generate a list of patterns to discover. For example, gen_patterns(\"myapp\", \"models\") generates patterns that make matchers discover the content in the following files. myapp/users/models.py myapp/invoices/models.py (etc. for all domain packages beyond \"users\" and \"invoices\") ... myapp/users/models_roles.py myapp/users/models_groups.py (etc. for all modules started with \"models_\" in all domain packages) ... myapp/users/models/roles.py myapp/users/models/groups.py (if you prefer nested structures) get_flask_rules ( import_path , flask_app ) Return a list of rules useful for the Flask application. The following rules will be returned: Load SQLAlchemy models (files models.py) Load Flask blueprints (files controllers.py) Load Flask CLI commands (files cli.py) Initialize services (top-level file services.py) Parameters: Name Type Description Default import_path str name of the top-level module of the project (like, \"myproject\") required flask_app a Flask app instance. required Returns: Type Description List[deescovery.discovery.IRule] A list of rules, suitable to be passed to \"deescovery.discover()\" models_loader ( import_path ) Load all models. service_initializer ( import_path , flask_app ) Find and initialize all instances of Flask applications. Notice that the initialize scans for top-level services files, and doesn't walk over all your app's domain package. matchers List of generic matchers. MatchByAttribute dataclass Object matcher that selects having an attribute with the given name. Constructor accepts an attribute name as a string. E.g., the following instance will find all objects that have an attribute init_app (a common way for initializing Flask plugins.) MatchByAttribute(\"init_app\") MatchByCallableAttribute dataclass Object matcher that selects having a callable attribute with the given name. Constructor accepts an attribute name as a string. E.g., the following instance will find all objects having a method init_app() (a common way for initializing Flask plugins.) MatchByCallableAttribute(\"init_app\") MatchByPattern dataclass Module matcher that selects module names by patterns. Constructor accepts the list of Unix shell-style wildcards for module names. E.g. the following instance will match all files \"models.py\" and \"models/ .py\" in a flat list of packages inside your application. matcher = MatchByPattern([\"*.models\", \"*.models.*\"]) MatchBySubclass dataclass Object matcher that select classes that are subclasses of a given type. Constructor accepts a type or a tuple of types. E.g., the following instance will find all Django models in a model. from django.db import models matcher = MatchBySubclass(models.Model) MatchByType dataclass Object matcher that selects instances by type. Constructor accepts a type or a tuple of types. E.g., the following instance will find all Flask blueprints in a module. from flask import Blueprint matcher = MatchByType(Blueprint)","title":"API"},{"location":"api/#deescovery.discovery","text":"","title":"discovery"},{"location":"api/#deescovery.discovery.IRule","text":"Generic type for a rule.","title":"IRule"},{"location":"api/#deescovery.discovery.ModuleRule","text":"Module rule. Defines a rule 'Run for all modules matching '.","title":"ModuleRule"},{"location":"api/#deescovery.discovery.ObjectRule","text":"Object rule. Defines a rule 'Run for all objects matching inside modules matching '.","title":"ObjectRule"},{"location":"api/#deescovery.discovery.discover","text":"Discover all objects. Scan the package, find all modules and objects, matching the given set of rules, and apply actions defined in them. Parameters: Name Type Description Default import_path str top-level module name to start scanning. Usually, it's a name of your application, e.g., \"myapp\". If your application doesn't have a single top-level module, you will probably call it for all top-level modules. required rules List[deescovery.discovery.IRule] a list of module and objects rules. Each rule contains the match specification and the action, if the object matches. required","title":"discover()"},{"location":"api/#deescovery.flask","text":"Module for the Flask-specific rules. A sample Flask app generator would look like this. from flask import Flask from deescovery discover from deescovery.flask import get_flask_rules def app () -> Flask : flask_app = Flask ( __name__ ) flask_app . config . from_object ( \"myapp.config\" ) discovery_rules = get_flask_rules ( \"myapp\" , flask_app ) discover ( \"dashboards\" , discovery_rules ) return flask_app","title":"flask"},{"location":"api/#deescovery.flask.blueprints_loader","text":"Find and import all blueprints in the application.","title":"blueprints_loader()"},{"location":"api/#deescovery.flask.commands_loader","text":"Find all commands and register them as Flask CLI commands.","title":"commands_loader()"},{"location":"api/#deescovery.flask.generate_patterns","text":"Generate a list of patterns to discover. For example, gen_patterns(\"myapp\", \"models\") generates patterns that make matchers discover the content in the following files. myapp/users/models.py myapp/invoices/models.py (etc. for all domain packages beyond \"users\" and \"invoices\") ... myapp/users/models_roles.py myapp/users/models_groups.py (etc. for all modules started with \"models_\" in all domain packages) ... myapp/users/models/roles.py myapp/users/models/groups.py (if you prefer nested structures)","title":"generate_patterns()"},{"location":"api/#deescovery.flask.get_flask_rules","text":"Return a list of rules useful for the Flask application. The following rules will be returned: Load SQLAlchemy models (files models.py) Load Flask blueprints (files controllers.py) Load Flask CLI commands (files cli.py) Initialize services (top-level file services.py) Parameters: Name Type Description Default import_path str name of the top-level module of the project (like, \"myproject\") required flask_app a Flask app instance. required Returns: Type Description List[deescovery.discovery.IRule] A list of rules, suitable to be passed to \"deescovery.discover()\"","title":"get_flask_rules()"},{"location":"api/#deescovery.flask.models_loader","text":"Load all models.","title":"models_loader()"},{"location":"api/#deescovery.flask.service_initializer","text":"Find and initialize all instances of Flask applications. Notice that the initialize scans for top-level services files, and doesn't walk over all your app's domain package.","title":"service_initializer()"},{"location":"api/#deescovery.matchers","text":"List of generic matchers.","title":"matchers"},{"location":"api/#deescovery.matchers.MatchByAttribute","text":"Object matcher that selects having an attribute with the given name. Constructor accepts an attribute name as a string. E.g., the following instance will find all objects that have an attribute init_app (a common way for initializing Flask plugins.) MatchByAttribute(\"init_app\")","title":"MatchByAttribute"},{"location":"api/#deescovery.matchers.MatchByCallableAttribute","text":"Object matcher that selects having a callable attribute with the given name. Constructor accepts an attribute name as a string. E.g., the following instance will find all objects having a method init_app() (a common way for initializing Flask plugins.) MatchByCallableAttribute(\"init_app\")","title":"MatchByCallableAttribute"},{"location":"api/#deescovery.matchers.MatchByPattern","text":"Module matcher that selects module names by patterns. Constructor accepts the list of Unix shell-style wildcards for module names. E.g. the following instance will match all files \"models.py\" and \"models/ .py\" in a flat list of packages inside your application. matcher = MatchByPattern([\"*.models\", \"*.models.*\"])","title":"MatchByPattern"},{"location":"api/#deescovery.matchers.MatchBySubclass","text":"Object matcher that select classes that are subclasses of a given type. Constructor accepts a type or a tuple of types. E.g., the following instance will find all Django models in a model. from django.db import models matcher = MatchBySubclass(models.Model)","title":"MatchBySubclass"},{"location":"api/#deescovery.matchers.MatchByType","text":"Object matcher that selects instances by type. Constructor accepts a type or a tuple of types. E.g., the following instance will find all Flask blueprints in a module. from flask import Blueprint matcher = MatchByType(Blueprint)","title":"MatchByType"},{"location":"flask/","text":"Usage with Flask The initial purpose of the package was to serve as a discovery module for the opinionated Flask structure. Out of the box, the deescovery can do the following. Initialize services. The de-facto standard of initializing Flask extensions is to have classes with the method init_app() . The rules will scan top-level services.py of your application, find all the instances that have init_app() methods, and call obj.init_app(app=flask_app) for each of them. Initialize blueprints. Scan controllers.py, controllers_*.py and controllers/ to find Flask blueprints and attach them to the flask application. Initialize SQLALchemy. Import all files in models.py models_*.py and models/ to help flask-migrate find all the SQLAlchemy models to create migrations. Initialize all commands. Flask supports custom commands . The rules scan cli.py, cli_*.py and cli/ to find flask.cli.AppGroup instances and attach them to Flask's CLI. The function expects the following project structure. myproject app.py config.py services.py foo/ controllers.py models.py cli.py bar/ controllers.py models.py cli.py ... An example of your top-level app.py # file: myproject/app.py from flask import Flask from deescovery import discover from deescovery.flask import get_flask_rules def app () -> Flask : flask_app = Flask ( __name__ , instance_relative_config = True ) flask_app . config . from_object ( \"myproject.config\" ) flask_rules = get_flask_rules ( \"myproject\" , flask_app ) discover ( \"myproject\" , flask_rules ) return flask_app An example of your top-level services.py # file: myproject/services.py from flask_sqlalchemy import SQLAlchemy from flask_migrate import Migrate from flask_mail import Mail db = SQLAlchemy () migrate = Migrate ( db = db ) mail = Mail ()","title":"Usage with Flask"},{"location":"flask/#usage-with-flask","text":"The initial purpose of the package was to serve as a discovery module for the opinionated Flask structure. Out of the box, the deescovery can do the following. Initialize services. The de-facto standard of initializing Flask extensions is to have classes with the method init_app() . The rules will scan top-level services.py of your application, find all the instances that have init_app() methods, and call obj.init_app(app=flask_app) for each of them. Initialize blueprints. Scan controllers.py, controllers_*.py and controllers/ to find Flask blueprints and attach them to the flask application. Initialize SQLALchemy. Import all files in models.py models_*.py and models/ to help flask-migrate find all the SQLAlchemy models to create migrations. Initialize all commands. Flask supports custom commands . The rules scan cli.py, cli_*.py and cli/ to find flask.cli.AppGroup instances and attach them to Flask's CLI. The function expects the following project structure. myproject app.py config.py services.py foo/ controllers.py models.py cli.py bar/ controllers.py models.py cli.py ... An example of your top-level app.py # file: myproject/app.py from flask import Flask from deescovery import discover from deescovery.flask import get_flask_rules def app () -> Flask : flask_app = Flask ( __name__ , instance_relative_config = True ) flask_app . config . from_object ( \"myproject.config\" ) flask_rules = get_flask_rules ( \"myproject\" , flask_app ) discover ( \"myproject\" , flask_rules ) return flask_app An example of your top-level services.py # file: myproject/services.py from flask_sqlalchemy import SQLAlchemy from flask_migrate import Migrate from flask_mail import Mail db = SQLAlchemy () migrate = Migrate ( db = db ) mail = Mail ()","title":"Usage with Flask"},{"location":"install/","text":"","title":"Install"}]}